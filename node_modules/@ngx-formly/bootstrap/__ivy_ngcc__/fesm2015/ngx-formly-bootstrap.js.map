{"version":3,"file":"ngx-formly-bootstrap.js","sources":["@ngx-formly/bootstrap/lib/types/checkbox.ts","@ngx-formly/bootstrap/lib/types/multicheckbox.ts","@ngx-formly/bootstrap/lib/types/input.ts","@ngx-formly/bootstrap/lib/types/radio.ts","@ngx-formly/bootstrap/lib/types/textarea.ts","@ngx-formly/bootstrap/lib/types/select.ts","@ngx-formly/bootstrap/lib/wrappers/form-field.wrapper.ts","@ngx-formly/bootstrap/lib/bootstrap.config.ts","@ngx-formly/bootstrap/lib/bootstrap.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-checkbox',\n  template: `\n    <div [ngClass]=\"{\n      'form-check': to.formCheck.indexOf('custom') === -1,\n      'form-check-inline': to.formCheck === 'inline',\n      'custom-control': to.formCheck.indexOf('custom') === 0,\n      'custom-checkbox': to.formCheck === 'custom' || to.formCheck === 'custom-inline',\n      'custom-control-inline': to.formCheck === 'custom-inline',\n      'custom-switch': to.formCheck === 'custom-switch'\n    }\">\n      <input type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n        [class.position-static]=\"to.formCheck === 'nolabel'\"\n        [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n        [indeterminate]=\"to.indeterminate && formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label [for]=\"id\"\n        *ngIf=\"to.formCheck !== 'nolabel'\"\n        [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n        [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n      >\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n  `,\n})\nexport class FormlyFieldCheckbox extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      indeterminate: true,\n      hideLabel: true,\n      formCheck: 'custom', // 'custom' | 'custom-inline' | 'custom-switch' | 'stacked' | 'inline' | 'nolabel'\n    },\n  };\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-multicheckbox',\n  template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{\n          'form-check': to.formCheck.indexOf('custom') === -1,\n          'form-check-inline': to.formCheck === 'inline',\n          'custom-control': to.formCheck.indexOf('custom') === 0,\n          'custom-checkbox': to.formCheck === 'custom' || to.formCheck === 'custom-inline',\n          'custom-control-inline': to.formCheck === 'custom-inline',\n          'custom-switch': to.formCheck === 'custom-switch'\n        }\"\n      >\n        <input type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n          [value]=\"option.value\"\n          [checked]=\"isChecked(option)\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\">\n        <label\n          [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  `,\n})\nexport class FormlyFieldMultiCheckbox extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      options: [],\n      formCheck: 'custom', // 'custom' | 'custom-inline' | 'custom-switch' | 'stacked' | 'inline'\n    },\n  };\n\n  onChange(value: any, checked: boolean) {\n    if (this.to.type === 'array') {\n      this.formControl.patchValue(checked\n        ? [...(this.formControl.value || []), value]\n        : [...(this.formControl.value || [])].filter(o => o !== value),\n      );\n    } else {\n      this.formControl.patchValue({ ...this.formControl.value, [value]: checked });\n    }\n    this.formControl.markAsTouched();\n  }\n\n  isChecked(option: any) {\n    const value = this.formControl.value;\n\n    return value && (\n      this.to.type === 'array'\n        ? (value.indexOf(option.value) !== -1)\n        : value[option.value]\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-input',\n  template: `\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  `,\n})\nexport class FormlyFieldInput extends FieldType {\n  get type() {\n    return this.to.type || 'text';\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-radio',\n  template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{\n          'form-check': to.formCheck.indexOf('custom') === -1,\n          'form-check-inline': to.formCheck === 'inline',\n          'custom-control custom-radio': to.formCheck.indexOf('custom') === 0,\n          'custom-control-inline': to.formCheck === 'custom-inline'\n        }\"\n      >\n        <input type=\"radio\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n          [name]=\"field.name || id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\"\n          [attr.disabled]=\"option.disabled || formControl.disabled ? true : null\">\n        <label\n          [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  `,\n})\nexport class FormlyFieldRadio extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      options: [],\n      formCheck: 'custom', // 'custom' | 'custom-inline' | 'stacked' | 'inline'\n    },\n  };\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-textarea',\n  template: `\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  `,\n})\nexport class FormlyFieldTextArea extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      cols: 1,\n      rows: 1,\n    },\n  };\n}\n","import { Component, ViewChild, NgZone } from '@angular/core';\nimport { SelectControlValueAccessor } from '@angular/forms';\nimport { FieldType } from '@ngx-formly/core';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-field-select',\n  template: `\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [compareWith]=\"to.compareWith\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n      <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n        <ng-container *ngIf=\"to._flatOptions else grouplist\">\n          <ng-container *ngFor=\"let opt of opts\">\n            <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor=\"let opt of opts\">\n            <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]=\"opt.label\">\n                <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [compareWith]=\"to.compareWith\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n        <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n          <ng-container *ngIf=\"to._flatOptions else grouplist\">\n            <ng-container *ngFor=\"let opt of opts\">\n              <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #grouplist>\n            <ng-container *ngFor=\"let opt of opts\">\n              <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n              <ng-template #optgroup>\n                <optgroup [label]=\"opt.label\">\n                  <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                    {{ child.label }}\n                  </option>\n                </optgroup>\n              </ng-template>\n            </ng-container>\n          </ng-template>\n        </ng-container>\n      </select>\n    </ng-template>\n  `,\n})\nexport class FormlyFieldSelect extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      options: [],\n      compareWith(o1: any, o2: any) {\n        return o1 === o2;\n      },\n    },\n  };\n\n  // workaround for https://github.com/angular/angular/issues/10010\n  @ViewChild(SelectControlValueAccessor) set selectAccessor(s: any) {\n    if (!s) return;\n\n    const writeValue = s.writeValue.bind(s);\n    if (s._getOptionId(s.value) === null) {\n      writeValue(s.value);\n    }\n\n    s.writeValue = (value: any) => {\n      const id = s._idCounter;\n      writeValue(value);\n      if (value === null) {\n        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n          if (id !== s._idCounter && s._getOptionId(value) === null && s._elementRef.nativeElement.selectedIndex !== -1) {\n            writeValue(value);\n          }\n        });\n      }\n    };\n  }\n\n  constructor(private ngZone: NgZone) {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-wrapper-form-field',\n  template: `\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n    </div>\n  `,\n})\nexport class FormlyWrapperFormField extends FieldWrapper {\n}\n","import { ConfigOption } from '@ngx-formly/core';\nimport {\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n} from './types/types';\nimport { FormlyWrapperFormField } from './wrappers/wrappers';\n\nexport const FIELD_TYPE_COMPONENTS = [\n  // types\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n\n  // wrappers\n  FormlyWrapperFormField,\n];\n\nexport const BOOTSTRAP_FORMLY_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: 'input',\n      component: FormlyFieldInput,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'checkbox',\n      component: FormlyFieldCheckbox,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'select',\n      component: FormlyFieldSelect,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'textarea',\n      component: FormlyFieldTextArea,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'multicheckbox',\n      component: FormlyFieldMultiCheckbox,\n      wrappers: ['form-field'],\n    },\n  ],\n  wrappers: [\n    {name: 'form-field', component: FormlyWrapperFormField },\n  ],\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { BOOTSTRAP_FORMLY_CONFIG, FIELD_TYPE_COMPONENTS } from './bootstrap.config';\nimport { FormlyBootstrapAddonsModule } from '@ngx-formly/bootstrap/addons';\n\n@NgModule({\n  declarations: [\n    FIELD_TYPE_COMPONENTS,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlySelectModule,\n    FormlyModule.forChild(BOOTSTRAP_FORMLY_CONFIG),\n    FormlyBootstrapAddonsModule,\n  ],\n})\nexport class FormlyBootstrapModule {}\n"]}